%BISECTION METHOD
a=input("Enter first no. : ");
b=input("Enter second no. : ");
flag=0;
f=@(x) (x^2)-29;
if (f(a)*f(b))>0
    disp('Wrong choice')
else
    p=(a+b)/2;
    e=abs(f(p));
    while e>(10^(-3))
        if (f(a)*f(p)<0)
            b=p;
        else
            a=p;
        end
        p=(a+b)/2;
        e=abs(f(p));
        flag=flag+1;
    end
end
disp(flag)
disp(p)




%NEWTON METHOD

f=@(x) x^2-29;
syms x;
g=@(x) 2*x;
xo=input('Enter initial approx - ');
err=10;
tol=10^(-5);
while (err>tol)
    x1=xo-(f(xo)/g(xo));
    err=abs(x1-xo);
    xo=x1;
end
disp(x1);


%SECANT METHOD
x0=input('Enter x0 : ');
x1=input('Enter x1 : ');
f=@(x) x^2-29;
g=@(x) 2*x;
e=10;
tol=10^(-4);
while(e>tol)
    x2=x1-((x1-x0)/(f(x1)-f(x0)))*f(x1);
    e=abs(x2-x1);
    x0=x1;
    x1=x2;
end
disp(x2)




%Fixed Point
clc
clear 
y0=input('Enter the number :');
y=y0;
g=@(x) 0.5*(10-x^3)^0.5;
x=10;
e=10^(-3);
i=1;
while(abs(x-y)>e && i<=50)
    x=y;
    y=g(x);
    i=i+1;
end
disp('The root is')
disp(y)





%LU
A=[10 8 -3 1;2 10 1 -4;3 -4 10 1;2 2 -3 10];
B=[16;9;10;11];
n=max(size(A));
X=zeros(n,1);
m=eye(n);
for j=1:n-1
    for i=j+1:n
        m(i,j)=A(i,j)/A(j,j);
        A(i,:)=A(i,:)-m(i,j)*A(j,:);
        B(i,:)=B(i,:)-m(i,j)*B(j,:);
    end
end
l=m;
u=A;
X(n,:)=B(n,:)/A(n,n);
for i=n-1:-1:1
    s=0;
    for j=n:-1:2
        s=s+A(i,j)*X(j,:);
    end
    X(i,:)=(B(i,:)-s)/A(i,i);
end
disp(l);
disp(u);
disp(X);


% Gauss Elimination Method
x=[10,8,-3,1;2,10,1,-4;3,-4,10,1;2,2,-3,10];
y=[16;9;10;11];
a=[x y];
n=max(size(x));
for i=1:n-1
    for j=i+1:n
        a(j,:)=a(j,:)-a(i,:)*(a(j,i)/(a(i,i)));
    end
end
an=zeros(n,1);
an(n)=a(n,n+1)/a(n,n);
for i=n-1:-1:1
    sum=0;
    for j=i+1:n
        sum=sum+a(i,j)*x(j);
    end
    an(i)=(a(i,n+1)-sum)/a(i,i);
end
an



%gauss siedel
clc
clear
A = [4.63,-1.21,3.22;-3.07,5.48,2.11;1.26,3.11,4.57];
n = length(A);
B = [2.22;-3.17;5.11];
x0 = [0,0,0];
x(:,1) = x0;
D = diag(diag(A));
L = tril(A) -D;
U = triu(A) -D;
err = 10;
i = 1;
while (err > 0.001)
    x(:,i+1) = inv(L+D)*B - inv(L+D)*U*x(:,i);
    err = norm((x(:,i+1) - x(:,i)),"inf");
    i = i+1;
end
disp(x(:,i))
disp(i)



%power method largest
A=[1 3 -1;3 2 4;-1 4 10];
x=[1;1;1];
tol=0.001;
k0=1;
y=A*x;
k=max(abs(y));
err=(abs(k0-k))

while(err>tol)
    y=A*x;
    k=max(abs(y));
    x=(1/k)*y;
    err=abs(k0-k);
    k0=k;
end
disp('The greatest eigenvalue is ')
disp(k0)
disp('Corresponding eigenvector is : ')
disp(x)



%power method smallest
B=[1 3 -1;3 2 4;-1 4 10];
A=inv(B)
x=[1;1;1];
tol=0.001;
k0=1;
y=A*x;
k=max(abs(y));
err=(abs(k0-k))

while(err>tol)
    y=A*x;
    k=max(abs(y));
    x=(1/k)*y;
    err=abs(k0-k);
    k0=k;
end
disp('The smallest eigenvalue is ')
disp(k0)
disp('Corresponding eigenvector is : ')
disp(x)




%lagrange
x=[0 0.25 0.5 0.75];
y=[1 1.64872 2.71828 4.48169];
p=input('Enter x for which value is required : ');
l=[];
n=max(size(x));
for i=1:n
    l(i)=1;
    for j=1:n
        if j~=i
            l(i)=(p-x(j))*l(i)/(x(i)-x(j));
        end
    end
end
sum=0;
for i=1:n
    sum=sum+l(i)*y(i);
end
disp(sum)



%newton's divided diff
x=[1.0 1.5 2.0 2.5];
y=[2.7183 4.4817 7.3891 12.1825];
p=input('Enter x for which value is required : ');
n=max(size(x));
for i=1:n
    D(i,1)=y(i);
end
for j=2:n
    for i=j:n
        D(i,j)=((D(i,j-1)-D(i-1,j-1))/(x(i)-x(i-j+1)));
    end
end
a=1;
s=D(1,1);
for i=2:n
    a=a*(p-x(i-1));
    s=s+a*D(i,i);
end
disp(s)


%trapezoidal
f=@(x) (cos(x))^2;
a=-0.25;
b=0.25;
n=10;
h=(b-a)/n;
sum=0;
for i=1:n-1
    x(i)=a+i*h;
    y(i)=f(x(i));
    sum=2*y(i)+sum;
end
trap=(h/2)*(f(a)+f(b)+sum);
display(trap);



%simpsons
f=@(x) (cos(x))^2;
a=-0.25;
b=0.25;
n=4;
h=(b-a)/n;
sum=0;
for i=1:n-1
    x=a+i*h;
    if(rem(i,2)==0)
        sum=sum+2*f(x);
    else
        sum=sum+4*f(x);
    end
end
simp=(h/3)*(f(a)+f(b)+sum);
display(simp);
